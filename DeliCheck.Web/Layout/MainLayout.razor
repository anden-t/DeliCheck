@using DeliCheck.Schemas.Responses
@using Toolbelt.Blazor.PWA.Updater
@inherits LayoutComponentBase
@inject NavigationManager nav
@inject DeliCheckClient client
@inject AlertService alert
@inject ThemeService theme
@inject IBlazorCurrentDeviceService _currentDevice 

<HeadContent>
    <RadzenTheme Theme="standard" />
</HeadContent>

<RadzenComponents />
<RadzenLayout>
    <RadzenHeader>
        <PWAUpdater Text="Новая версия доступна!" ButtonCaption="Обновить"/>
        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween" Gap="0">

            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0">
                <RadzenSidebarToggle Click="@(() => sidebarExpanded = !sidebarExpanded)" />
                <RadzenLabel Text="ДелиЧек" style="font-size: 1.2rem; font-weight: 600"/>
            </RadzenStack>

            <RadzenProfileMenu @bind-Visible="@(_isAuth)">
                <Template>
                    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center">
                        <RadzenImage class="rounded-image" @bind-Path="@_profileUrl" Style="width: 2.5rem; height: 2.5rem;" />
                        <RadzenText class="rz-mb-0 rz-mx-2" Style="color: var(--rz-header-color)" @bind-Text="@_username" />
                    </RadzenStack>
                </Template>
                <ChildContent>
                    <RadzenProfileMenuItem Text="Мой профиль" Path="/profile" Icon="person"></RadzenProfileMenuItem>

                    <RadzenProfileMenuItem Text="Выйти" Path="/auth/logout" Icon="logout"></RadzenProfileMenuItem>
                </ChildContent>
            </RadzenProfileMenu>
        </RadzenStack>
    </RadzenHeader>
    <RadzenSidebar @bind-Expanded="@sidebarExpanded">
        <RadzenPanelMenu>
            <RadzenPanelMenuItem Click=@HideSidebar Text="Разделить чек" Path="/" Icon="receipt_long" />
            <RadzenPanelMenuItem Click=@HideSidebar Text="Мои друзья" Path="/friends" Icon="group" />
            <RadzenPanelMenuItem Click=@HideSidebar Text="Мои чеки" Path="/my-invoices" Icon="shopping_cart"></RadzenPanelMenuItem>
            <RadzenPanelMenuItem Click=@HideSidebar Text="О нас" Path="/about" Icon="alternate_email" />
            <RadzenPanelMenuItem Click=@HideSidebar Text="Помощь" Path="https://t.me/maass78" Icon="help" />
        </RadzenPanelMenu>

        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.End" class="rz-px-2 rz-py-4">
            <RadzenStack Orientation="Orientation.Vertical" Gap="0">
                <RadzenLabel class="rz-mb-1" Text="Выбор темы"/>
                <RadzenDropDown Name="ThemeDropDown" TValue="string" Value="@theme.Theme" ValueChanged="@ChangeTheme" Data="@Themes.Free" TextProperty=@nameof(Theme.Text) ValueProperty=@nameof(Theme.Value)></RadzenDropDown>
            </RadzenStack>
            <RadzenAppearanceToggle />
        </RadzenStack>

    </RadzenSidebar>
    <RadzenBody Style="padding: 0.5rem;">

        @Body

    </RadzenBody>
    @*  <RadzenFooter>
        Footer
    </RadzenFooter> *@
</RadzenLayout>


<style>
    .rounded-image {
    border-radius: 50%;
    border-width: 2px;
    border-color: var(--rz-base-400);
    padding: 0.125rem;
    }
</style>



@code {
    bool sidebarExpanded = false;
    private bool _isAuth = false;
    private string _profileUrl = string.Empty;
    private string _username = string.Empty;


    private async Task HideSidebar() 
    {
        string type = await _currentDevice.Type();

        if (type != "desktop")
            sidebarExpanded = false;
    }

    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();
        _isAuth = await client.IsAuthenticated();

        if (_isAuth)
        {
            try
            {
                var profile = await client.GetProfile();
                _profileUrl = profile.AvatarUrl;
                _username = profile.Firstname;
            }
            catch (ApiException ex)
            {
                if (ex.ApiResponse.Message == Constants.Unauthorized)
                {
                    await client.ClearLogin();
                    nav.NavigateTo("/auth/login");
                }
            }
        }

        alert.OnAuthStatusChanged += AuthStatusChanged;
    }

    void ChangeTheme(string value)
    {
        theme.SetTheme(value);
    }

    private async Task AuthStatusChanged(bool authStatus)
    { 
        _isAuth = authStatus;

        if (_isAuth)
        {
            try
            {
                var profile = await client.GetProfile();
                _profileUrl = profile.AvatarUrl;
                _username = profile.Firstname;
            }
            catch (ApiException ex)
            {
                if (ex.ApiResponse.Message == Constants.Unauthorized)
                {
                    await client.ClearLogin();
                    nav.NavigateTo("/auth/login");
                }
            }
        }
    }
}

<style>
     :root {
       /*  --rz-primary: #3b82f6;
        --rz-primary-light: #3b82f6;
        
        --rz-secondary: #3b82f6;
        --rz-text-font-family: 'Inter', sans-serif;
        --rz-header-color: #000;
        --rz-header-background-color: #fff;
        --rz-text-body1-letter-spacing: inherit;
        --rz-sidebar-toggle-color: #000;
        --rz-secondary-light: #000; */

        --rz-scrollbar-size: 12px;
        --rz-text-font-family: 'Inter', sans-serif;
        --rz-datalist-padding: 0.4rem 0px;
        --rz-datalist-item-padding: 0.25rem 0.75rem;
        --rz-datalist-item-margin-inline: 0px;

       /*  --rz-sidebar-background-color: #fff;
        --rz-sidebar-color: #000;

        --rz-sidebar-border-inline-end: 0px;
        --rz-panel-menu-item-background-color: #fff;
        --rz-panel-menu-item-color: #000;
        --rz-panel-menu-item-border: 0px;
        --rz-panel-menu-item-hover-background-color: lightgray;
        --rz-panel-menu-item-active-background-color: lightgray;
        --rz-panel-menu-item-transition: color var(--rz-transition), background-color var(--rz-transition);
        --rz-panel-menu-icon-color: #000; */
    }


.my-button {
    border-radius: 0.5rem;
    text-transform: none;
    letter-spacing: inherit;
    font-size: 1rem;
    padding: 0.75rem;
}

.card {
   background: var(--rz-card-background-color);
   min-width: 300px;
   
   width: 100%;
   padding: 1rem
}

   /*  body {
        font-family: 'Inter', sans-serif;
    } */
</style>