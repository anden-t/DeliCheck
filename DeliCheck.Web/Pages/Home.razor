@page "/"
@using System.Text.Json
@using DeliCheck.Schemas
@using DeliCheck.Web.Models
@using Blazorise.LottieAnimation


@inject DeliCheckClient _client
@inject DialogService _dialog
@inject NotificationService _notify
@inject NavigationManager _nav
@inject IJSRuntime _js

<PageTitle>ДелиЧек — Главная</PageTitle>

<RadzenStack Orientation="Orientation.Vertical" JustifyContent="JustifyContent.Center" AlignItems="AlignItems.Center" style="width: 100%; margin-top: 1rem">

    <div class="rz-shadow-2 rz-border-radius-2 card" Style="max-width: 500px; width: 100%">

        <RadzenText class="rz-mb-3" TextAlign="TextAlign.Center" TextStyle="TextStyle.H5" style="font-weight: 600;">Разделить чек</RadzenText>
        <RadzenText class="rz-mb-3" TextAlign="TextAlign.Center" TextStyle="TextStyle.H6">Загрузите фото чека, чтобы разделить его с друзьями!</RadzenText>

        <LottieAnimation Path="https://lottie.host/c0963a9f-abb5-4586-99c4-1dba69a48a16/xVH2YwVDUT.json"
        Loop="true"
        Paused=@_animPaused
        style="aspect-ratio: 1; width: 100%; max-width: 200px; margin-inline: auto; margin-bottom: 1rem;"></LottieAnimation>

        <RadzenStack Orientation="Orientation.Vertical" Gap="0" class="rz-mb-2">
            <RadzenButton class="my-button rz-mb-3" @bind-IsBusy=@_isBusyOcr BusyText="Распознаем позиции..." Text="Загрузить чек" Click="@OpenFileUpload" Image="/images/camera.svg" />
            <RadzenButton class="my-button" @bind-IsBusy=@_isBusyQr BusyText="Распознаем позиции..." Text="Сканировать QR-код" Click="@QrCodeScanningStart" Image="/images/qrcode-scan.svg"/>
        </RadzenStack>

        <RadzenText TextAlign="TextAlign.Center" class="rz-mb-0" style="font-style: italic; font-size: 0.7rem">На фото чек должен быть расположен ровно, а все позиции должны быть читаемы</RadzenText>
        <RadzenText TextAlign="TextAlign.Center" class="rz-mb-1" style="font-style: italic; font-size: 0.7rem">После загрузки обрежьте изображение чека так, чтобы было видно <b>только позиции</b></RadzenText>
    </div>

</RadzenStack>

<AuthRedirect/>



@code {

    bool _isBusyOcr;
    bool _isBusyQr;
    bool _disabledQr;
    bool _disabledOcr;
    bool _animPaused = true;

    public async void QrCodeScanningStart()
    {
        var type = await _dialog.OpenAsync<SplitTypeDialog>("Как будем делить чек?",
            options: new DialogOptions()
                {
                    Resizable = false,
                    Draggable = false
                }) as SplitTypeDialogResult;

        if (type == null)
            return;

        var res = await _dialog.OpenAsync<QrCodeDialog>($"Отсканируйте QR-код",
               options: new DialogOptions()
                   {
                       Resizable = false,
                       Draggable = false,
                   }) as string;

        if (res == null)
            return;

        _disabledOcr = true;
        _isBusyQr = true;
        _animPaused = false;
        await InvokeAsync(() => StateHasChanged());

        try
        {
            var invoice = await _client.InvoiceQr(res, type.Type);
            if(type.Type == InvoiceSplitType.ByOwner)
                _nav.NavigateTo($"/deli?id={invoice.Id}");
            else
                _nav.NavigateTo($"/editing?id={invoice.Id}");
        }
        catch (ApiException ex)
        {
            _notify.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = ex.ApiResponse.Message, Detail = "Попробуйте еще раз", Duration = 4000 });
        }
        finally
        {
            _disabledOcr = false;
            _isBusyOcr = false;
            _animPaused = true;
            await InvokeAsync(() => StateHasChanged());
        }
    }

    public async void OpenFileUpload()
    {
        var type = await _dialog.OpenAsync<SplitTypeDialog>("Как будем делить чек?",
            options: new DialogOptions()
                {
                    Resizable = false,
                    Draggable = false,
                }) as SplitTypeDialogResult;

        if (type == null)
            return;

        var res = await _dialog.OpenAsync<CropCheck>($"Выберите изображение",
               options: new DialogOptions()
                   {
                       Resizable = false,
                       Draggable = false,
                   }) as CropCheckResult;

        if (res == null)
            return;

        _disabledQr = true;
        _isBusyOcr = true;
        _animPaused = false;
        await InvokeAsync(() => StateHasChanged());

        try
        {
            var invoice = await _client.InvoiceOcr(res, type.Type);
            if(invoice.OcrEngine == "tesseract")
            {
                _notify.Notify(new NotificationMessage { Severity = NotificationSeverity.Warning, Summary = "API OCR сейчас недоступен", Detail = "Чек был распознан с помощью локального OCR, результаты могут быть неточными. Попробуйте снова через несколько минут.", Duration = 20000 });
            }

            if (type.Type == InvoiceSplitType.ByOwner)
                _nav.NavigateTo($"/deli?id={invoice.Id}");
            else
                _nav.NavigateTo($"/editing?id={invoice.Id}");
        }
        catch (ApiException ex)
        {
            _notify.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = ex.ApiResponse.Message, Detail = "Попробуйте еще раз", Duration = 4000 });
        }
        finally
        {
            _disabledOcr = true;
            _isBusyOcr = false;
            _animPaused = true;
            await InvokeAsync(() => StateHasChanged());
        }
    }
}

