@page "/editing"
@using DeliCheck.Schemas
@using DeliCheck.Schemas.Requests
@using DeliCheck.Schemas.Responses
@using System.Globalization

@inject DeliCheckClient _client
@inject DialogService _dialog
@inject NotificationService _notify
@inject ContextMenuService _contextMenuService
@inject NavigationManager _nav

<PageTitle>ДелиЧек — Редактировать чек</PageTitle>

<RadzenStack Orientation="Orientation.Vertical" JustifyContent="JustifyContent.Center" AlignItems="AlignItems.Center" style="width: 100%; margin-top: 1rem">
    <div class="rz-shadow-2 rz-border-radius-2 card" Style="max-width: 500px; width: 100%">

        <RadzenText class="rz-mb-3" TextAlign="TextAlign.Center" TextStyle="TextStyle.H5" style="font-weight: 600;">Разделить чек</RadzenText>
        <RadzenText class="rz-mb-3" TextAlign="TextAlign.Center">Для начала отредактируйте чек, если требуются исправления</RadzenText>


        <RadzenStack Orientation="Orientation.Vertical" Gap="0">

            <RadzenStack class="rz-mb-1" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
                <RadzenText class="rz-mb-0" TextAlign="TextAlign.Left" TextStyle="TextStyle.H6" style="font-weight: 600;">Список позиций</RadzenText>
                <RadzenButton Icon="add" Click=@AddItem IsBusy=@_adding class="my-button" ButtonStyle="ButtonStyle.Primary" />
            </RadzenStack>


            <RadzenDataList Attributes="@(new Dictionary<string, object>() { ["list"] = "items" })" Visible="true" AllowVirtualization=@allowVirtualization Style="@(allowVirtualization ? "height:100%;margin-top:1rem;padding:0px;overflow-x:hidden" : "")"
            WrapItems="@(!allowVirtualization)" AllowPaging="@(!allowVirtualization)"
            Data="@_items" TItem="InvoiceItem" PageSize="5" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true" IsLoading="@_isLoading">

                <Template Context="item">

                    <RadzenStack Orientation="Orientation.Vertical" JustifyContent="JustifyContent.Start" AlignItems="AlignItems.Stretch">

                        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Start" AlignItems="AlignItems.Center" Gap="0">
                            <RadzenFormField Text="Название" Style="width: 100%; margin-right: 0.5rem">
                                <ChildContent>
                                    <RadzenTextBox Disabled="@(!item.IsEditingName)" @oninput="@((s) => OnInputName(item, s))" Value="@(item.Name)" aria-label="Название" />
                                </ChildContent>
                                <End>
                                    <RadzenButton Disabled="@(!item.EnableToSaveName)" IsBusy=@item.SavingName @bind-Visible="item.IsEditingName" Click=@(() => SaveName(item)) Icon="save" Variant="Variant.Text" Size="ButtonSize.Small" />
                                    <RadzenButton Icon="@(item.IsEditingName ? "close" : "edit")" Click="@(() => item.IsEditingName = !item.IsEditingName)" Variant="Variant.Text" Size="ButtonSize.Small" />
                                </End>
                            </RadzenFormField>

                            <RadzenFormField Text="@($"Цена за {(item.CountInteger ? ((int)item.Count).ToString() : item.Count.ToString())}")" style="@((item.IsEditingCost ? "max-width: 9rem" : "max-width: 7rem") + ";width:100%")">
                                <ChildContent>
                                    <RadzenNumeric TValue="int" ShowUpDown="false" Disabled="@(!item.IsEditingCost)" @oninput="@((s) => OnInputCost(item, s))" Value="@(item.Cost)" Format="# ₽" aria-label="Цена" />
                                </ChildContent>
                                <End>
                                    <RadzenButton Disabled="@(!item.EnableToSaveCost)" IsBusy=@item.SavingCost @bind-Visible="item.IsEditingCost" Click=@(() => SaveCost(item)) Icon="save" Variant="Variant.Text" Size="ButtonSize.Small" />
                                    <RadzenButton Icon="@(item.IsEditingCost ? "close" : "edit")" Click="@(() => item.IsEditingCost = !item.IsEditingCost)" Variant="Variant.Text" Size="ButtonSize.Small" />
                                </End>
                            </RadzenFormField>
                        </RadzenStack>


                        <RadzenStack class="rz-mt-1" Orientation="Orientation.Horizontal" AlignItems="AlignItems.End" JustifyContent="JustifyContent.SpaceBetween">
                            <RadzenText Text="@(((item.Count == 1 || !item.CountInteger) ? item.UsersParts.Values.Sum() == 0 : item.UsersParts.Values.Sum() != item.Count) ? "Разделите позицию" : "")" style="color: var(--rz-danger)" />

                            <RadzenStack Orientation="Orientation.Vertical" JustifyContent="JustifyContent.Start" AlignItems="AlignItems.Center">

                                <RadzenText class="rz-mb-0" Style="font-size: 0.75rem">Количество</RadzenText>
                                <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center" AlignItems="AlignItems.Center">
                                    <RadzenButton Variant="Variant.Text" IsBusy="@item.SavingDecreaseCount" Disabled="@(item.SavingIncreaseCount || !item.CountInteger || item.Count == 1)" ButtonStyle="ButtonStyle.Base" Icon="remove" Click="@(() => DecreaseCount(item))" />

                                    <RadzenText class="rz-mb-0 rz-mx-2" Text="@(item.CountInteger ? ((int)item.Count).ToString() : item.Count.ToString())"></RadzenText>
                                    <RadzenButton Variant="Variant.Text" IsBusy="@item.SavingIncreaseCount" Disabled="@(item.SavingDecreaseCount || !item.CountInteger)" ButtonStyle="ButtonStyle.Base" Icon="add" Click="@(() => IncreaseCount(item))" />

                                </RadzenStack>

                            </RadzenStack>

                            @*  <RadzenFormField Visible="@item.CountInteger" Text="Количество" style="@((item.IsEditingCount ? "max-width: 9rem" : "max-width: 7rem") + ";width:100%")">
                                <ChildContent>
                                    <RadzenNumeric TValue="decimal" ShowUpDown="false" Disabled="@(!item.IsEditingCount)" @oninput="@((s) => OnInputCount(item, s))" Value="@(item.Count)" aria-label="Цена" />
                                </ChildContent>
                                <End>
                                    <RadzenButton Disabled="@(!item.EnableToSaveCount)" IsBusy=@item.SavingCount @bind-Visible="item.IsEditingCount" Click=@(() => SaveCost(item)) Icon="save" Variant="Variant.Text" Size="ButtonSize.Small" />
                                    <RadzenButton Icon="@(item.IsEditingCount ? "close" : "edit")" Click="@(() => item.IsEditingCount = !item.IsEditingCount)" Variant="Variant.Text" Size="ButtonSize.Small" />
                                </End>
                            </RadzenFormField> *@
                        </RadzenStack>

                        <RadzenButton Variant="Variant.Text" Style="font-size: 0.7rem;" IsBusy=@item.Deleting BusyText="Удаляем..." Text="Удалить позицию" ButtonStyle="ButtonStyle.Danger" Click="@(() => DeleteItem(item))" />
                    </RadzenStack>
                </Template>

            </RadzenDataList>

        </RadzenStack>



        <div style="width: 100%; border: var(--rz-datalist-item-border); border-width: 1px 0px 0px 0px; height: 1px; background: transparent;" />

        <RadzenText class="rz-my-3" TextAlign="TextAlign.Right" Style="font-weight: 600" Text="@_textTotal"></RadzenText>

        <RadzenStack Style="rz-mt-3" Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center" AlignItems="AlignItems.Center">
            <RadzenButton class="my-button rz-w-100" Icon="percent" IsBusy=@_discount BusyText="Ура! Скидка..." Text="Скидка" Click="@AddDiscount"></RadzenButton>
            <RadzenButton class=" my-button rz-w-100" Icon="savings" IsBusy=@_tips BusyText="Добавляем чаевые..." Text="Чаевые" Click="@AddTips"></RadzenButton>
        </RadzenStack>

        <RadzenButton class="rz-mt-3 my-button rz-w-100" Disabled=@(!_processAllowed) IsBusy=@_processing BusyText="Разделяем..." Text="Завершить редактирование" Click="@FinishEditing"></RadzenButton>
    </div>

</RadzenStack>

<style>

    :root {
    --rz-input-disabled-color: var(--rz-text-h6-color);
    }

    .rz-numeric input[type=text] {
    padding-inline: 0.5rem 0.25rem;
    }

    div[list=items] > .rz-datalist-data {
    padding: 0px;
    }

    div[list=items] > .rz-datalist-data > li {
    border-width: 1px 0px 0px 0px;
    border-radius: 0px;
    padding: 1rem 0px;
    }

    div[list=users] > .rz-g {
    flex-direction: row;
    flex-wrap: nowrap;
    }

    div[list=users] > .rz-g > div {
    margin-block: 0px;
    margin-inline: 0rem 1rem;
    padding: 0.125rem 0.125rem;
    }

</style>

<AuthRedirect />

@code {
    private bool allowVirtualization = true;
    private bool _isLoading = false;
    private bool _adding = false;
    private bool _processing = false;

    private bool _tips = false;
    private bool _discount = false;

    private bool _processAllowed = false;
    private int _myUserId;

    private string _textTotal;

    [Parameter]
    [SupplyParameterFromQuery(Name = "id")]
    public string? Id { get; set; }

    private InvoiceResponseModel _invoice;

    private IQueryable<InvoiceItem> _items;

    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();

        if (!await _client.IsAuthenticated())
        {
            _notify.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Необходимо авторизоваться", Detail = "Попробуйте еще раз", Duration = 4000 });
            return;
        }

        if (Id == null || !int.TryParse(Id, out int id))
            return;

        _isLoading = true;
        await InvokeAsync(() => StateHasChanged());

        var myProfile = await _client.GetProfile();
        _invoice = await _client.GetInvoice(id);

        if (_invoice.BillsCreated)
        {
            _nav.NavigateTo($"/invoice?id={id}");
            return;
        }

        if (_invoice.SplitType == InvoiceSplitType.ByOwner)
        {
            _nav.NavigateTo($"/deli?id={id}");
            return;
        }

        if (_invoice.EditingFinished)
        {
            _nav.NavigateTo($"/lobby?id={id}");
            return;
        }

        if (_invoice.OwnerId != myProfile.Id)
        {
            _notify.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Вы не являеетесь владельцем чека", Detail = "Попробуйте еще раз", Duration = 4000 });
            return;
        }

        _items = _invoice.Items.FromList().AsQueryable();


        _myUserId = myProfile.Id;

        _textTotal = $"Итого: {_items.Sum(x => x.Cost)} ₽";
        _isLoading = false;
        _processAllowed = true;
        await InvokeAsync(() => StateHasChanged());
    }

    private async Task OnInputName(InvoiceItem item, ChangeEventArgs args)
    {
        item.EditedName = (string?)args.Value ?? string.Empty;
        item.EnableToSaveName = !string.IsNullOrWhiteSpace(item.EditedName) && item.EditedName != item.Name;
        await InvokeAsync(() => StateHasChanged());
    }

    private async Task OnInputCost(InvoiceItem item, ChangeEventArgs args)
    {
        if (string.IsNullOrWhiteSpace((string?)args.Value))
        {
            item.EditedCost = 0;
            item.EnableToSaveCost = true;
        }

        var value = ((string)args.Value).Replace(",", ".").Replace("₽", string.Empty).Trim();

        if (!int.TryParse(value, out int cost))
        {
            item.EnableToSaveCost = false;
        }

        item.EditedCost = cost;
        item.EnableToSaveCost = item.EditedCost != item.Cost;
        await InvokeAsync(() => StateHasChanged());
    }

    private async Task IncreaseCount(InvoiceItem item)
    {
        item.SavingIncreaseCount = true;
        await InvokeAsync(() => StateHasChanged());

        try
        {
            await _client.EditInvoiceItem(new InvoiceItem() { Id = item.Id, Cost = item.Cost, Count = item.Count + 1, Name = item.Name });
            item.Count += 1;
        }
        catch (ApiException ex)
        {
            _notify.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = ex.ApiResponse.Message, Detail = "Попробуйте еще раз", Duration = 4000 });
        }
        finally
        {
            item.SavingIncreaseCount = false;
            await InvokeAsync(() => StateHasChanged());
        }


        item.SavingIncreaseCount = false;
        await InvokeAsync(() => StateHasChanged());
    }

    private async Task DecreaseCount(InvoiceItem item)
    {
        item.SavingDecreaseCount = true;
        await InvokeAsync(() => StateHasChanged());

        try
        {
            await _client.EditInvoiceItem(new InvoiceItem() { Id = item.Id, Cost = item.Cost, Count = item.Count - 1, Name = item.Name });
            item.Count -= 1;
        }
        catch (ApiException ex)
        {
            _notify.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = ex.ApiResponse.Message, Detail = "Попробуйте еще раз", Duration = 4000 });
        }
        finally
        {
            item.SavingDecreaseCount = false;
            await InvokeAsync(() => StateHasChanged());
        }
    }


    private async Task SaveName(InvoiceItem item)
    {
        item.SavingName = true;

        try
        {
            await _client.EditInvoiceItem(new InvoiceItem() { Id = item.Id, Cost = item.Cost, Count = item.Count, Name = item.EditedName });
            item.Name = item.EditedName;
            item.IsEditingName = false;
        }
        catch (ApiException ex)
        {
            _notify.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = ex.ApiResponse.Message, Detail = "Попробуйте еще раз", Duration = 4000 });
        }
        finally
        {
            item.SavingName = false;
        }
    }

    private async Task SaveCost(InvoiceItem item)
    {
        item.SavingCost = true;

        try
        {
            await _client.EditInvoiceItem(new InvoiceItem() { Id = item.Id, Cost = item.EditedCost, Count = item.Count, Name = item.Name });
            item.Cost = item.EditedCost;
            item.IsEditingCost = false;
        }
        catch (ApiException ex)
        {
            _notify.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = ex.ApiResponse.Message, Detail = "Попробуйте еще раз", Duration = 4000 });
        }
        finally
        {
            _textTotal = $"Итого: {_items.Sum(x => x.Cost)} ₽";
            item.SavingCost = false;
        }
    }

    private async Task DeleteItem(InvoiceItem item)
    {
        item.Deleting = true;
        await InvokeAsync(() => StateHasChanged());

        try
        {
            await _client.RemoveInvoiceItem(item);
            var newItems = _items.ToList();
            newItems.Remove(item);
            _items = newItems.AsQueryable();
        }
        catch (ApiException ex)
        {
            _notify.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = ex.ApiResponse.Message, Detail = "Попробуйте еще раз", Duration = 4000 });
        }
        finally
        {
            _textTotal = $"Итого: {_items.Sum(x => x.Cost)} ₽";
            item.SavingDecreaseCount = false;
            await InvokeAsync(() => StateHasChanged());
        }
    }

    private async Task AddItem()
    {
        _adding = true;
        await InvokeAsync(() => StateHasChanged());

        try
        {
            var item = new InvoiceItem()
                {
                    Name = "Новая позиция",
                    Cost = 1,
                    Count = 1,
                    UsersParts = new Dictionary<Friend, int>()
                };

            var res = await _client.AddInvoiceItem(_invoice.Id, item);

            item.Id = res.Id;
            var newItems = _items.ToList();
            newItems.Add(item);
            _items = newItems.AsQueryable();
        }
        catch (ApiException ex)
        {
            _notify.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = ex.ApiResponse.Message, Detail = "Попробуйте еще раз", Duration = 4000 });
        }
        finally
        {
            _textTotal = $"Итого: {_items.Sum(x => x.Cost)} ₽";
            _adding = false;
            await InvokeAsync(() => StateHasChanged());
        }
    }

    private async Task AddTips()
    {
        _tips = true;
        await InvokeAsync(() => StateHasChanged());

        try
        {
            var item = new InvoiceItem()
                {
                    Name = "Чаевые",
                    Cost = 250,
                    Count = 1,
                    UsersParts = new Dictionary<Friend, int>()
                };

            var res = await _client.AddInvoiceItem(_invoice.Id, item);

            item.Id = res.Id;
            var newItems = _items.ToList();
            newItems.Add(item);
            _items = newItems.AsQueryable();
        }
        catch (ApiException ex)
        {
            _notify.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = ex.ApiResponse.Message, Detail = "Попробуйте еще раз", Duration = 4000 });
        }
        finally
        {
            _textTotal = $"Итого: {_items.Sum(x => x.Cost)} ₽";
            _tips = false;
            await InvokeAsync(() => StateHasChanged());
        }
    }

    private async Task AddDiscount()
    {
        int cost = _items.Sum(x => x.Cost);

        var val = await _dialog.OpenAsync<DiscountDialog>($"Введите величину скидки",
           new Dictionary<string, object>()
               {
                   ["Cost"] = cost
               },
           new DialogOptions()
               {
                   Resizable = false,
                   Draggable = true,
               });

        if (val == null)
            return;

        //var discount = ((int)val / 100m) * cost;

        _discount = true;
        await InvokeAsync(() => StateHasChanged());

        try
        {
            foreach (var item in _items)
            {
                item.EditedCost = item.Cost - (int)Math.Round(((int)val / 100m) * item.Cost);
                await SaveCost(item);
            }
        }
        catch (ApiException ex)
        {
            _notify.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = ex.ApiResponse.Message, Detail = "Попробуйте еще раз", Duration = 4000 });
        }
        finally
        {
            _textTotal = $"Итого: {_items.Sum(x => x.Cost)} ₽";
            _discount = false;
            await InvokeAsync(() => StateHasChanged());
        }
    }

    private async Task FinishEditing()
    {
        try
        {
            _processing = true;
            await InvokeAsync(() => StateHasChanged());

            await _client.FinishInvoiceEditing(_invoice.Id);
        }
        catch (ApiException ex)
        {
            _notify.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = ex.ApiResponse.Message, Detail = "Попробуйте еще раз", Duration = 4000 });
        }
        finally
        {
            _processing = false;
            await InvokeAsync(() => StateHasChanged());

            _nav.NavigateTo($"/invoice?id={_invoice.Id}");
        }
    }
}
