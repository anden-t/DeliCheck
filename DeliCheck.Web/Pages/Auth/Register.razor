@page "/auth/register"
@inject DeliCheckClient _client
@inject NavigationManager _nav
@inject NotificationService _notify

<PageTitle>ДелиЧек — Регистрация</PageTitle>

<RadzenStack Orientation="Orientation.Vertical" JustifyContent="JustifyContent.Center" AlignItems="AlignItems.Center" style="width: 100%; margin-top: 1rem">
    <div class="rz-shadow-2 rz-border-radius-2 rz-mb-1 card" style="padding: 2rem; max-width: 350px;">
        <RadzenStack Orientation="Orientation.Vertical" JustifyContent="JustifyContent.Center" AlignItems="AlignItems.Stretch" Gap="0">

            <RadzenText class="rz-mb-3" TextAlign="TextAlign.Center" TextStyle="TextStyle.H5" style="font-weight: 600;">Регистрация</RadzenText>

            <div class="rz-mb-1">
                <RadzenFormField Text="Имя пользователя" class="rz-w-100">
                    <RadzenTextBox @bind-Value="_username" @oninput="@((s) => UsernameChanged((string?)s.Value ?? string.Empty))" aria-label="Имя пользователя" />
                </RadzenFormField>
            </div>
            <div class="rz-mb-1">
                <RadzenFormField Text="Пароль" class="rz-w-100">
                    <ChildContent>
                        <RadzenTextBox @bind-Value="_password" @oninput="@((s) => PasswordChanged((string?)s.Value ?? string.Empty))" Visible="@(!_passwordNotVisible)" />
                        <RadzenPassword @bind-Value="_password" @oninput="@((s) => PasswordChanged((string?)s.Value ?? string.Empty))" Visible="@_passwordNotVisible" />
                    </ChildContent>
                    <End>
                        <RadzenButton Icon="@(_passwordNotVisible ? "visibility" : "visibility_off")" Click="TogglePassword" Variant="Variant.Text" Size="ButtonSize.Small" />
                    </End>
                </RadzenFormField>
            </div>

            <div class="rz-mb-1">
                <RadzenFormField Text="Имя" class="rz-w-100">
                    <RadzenTextBox @bind-Value="_firstname" @oninput="@((s) => FirstnameChanged((string?)s.Value ?? string.Empty))" aria-label="Имя" />
                </RadzenFormField>
            </div>

            <div class="rz-mb-3">
                <RadzenFormField Text="Фамилия" class="rz-w-100">
                    <RadzenTextBox @bind-Value="_lastname" aria-label="Фамилия" />
                </RadzenFormField>
            </div>

            @*   <div class="rz-mb-3">
                <RadzenFormField Text="Электронная почта" class="rz-w-100">
                    <RadzenTextBox @bind-Value="_email" aria-label="Электронная почта" />
                </RadzenFormField>
            </div>

            <div class="rz-mb-3">
                <RadzenFormField Text="Телефон" class="rz-w-100">
                    <RadzenTextBox @bind-Value="_phoneNumber" aria-label="Телефон" />
                </RadzenFormField>
            </div> *@

            <RadzenButton class="rz-mb-0 my-button" @bind-Disabled=@_registerDisabled IsBusy=@_registerBusy BusyText="Регистрируемся..." Click=@Reg Text="Зарегистрироваться" ButtonStyle="ButtonStyle.Primary" />

        </RadzenStack>

        <RadzenText class="rz-mb-0" TextAlign="TextAlign.Center">Есть аккаунт? <RadzenLink Path="/auth/login" Text="Войти" /></RadzenText>
    </div>
    <div>
        <RadzenLink Path="/auth/register-guest" Text="Продолжить без регистрации" />
    </div>

</RadzenStack>

@code {
    private void TogglePassword(MouseEventArgs args) => _passwordNotVisible = !_passwordNotVisible;



    private string _username = string.Empty;
    private string _password = string.Empty;
    private string _firstname = string.Empty;
    private string _lastname = string.Empty;
    private string _email = string.Empty;
    private string _phoneNumber = string.Empty;

    private bool _passwordNotVisible = true;
    private bool _registerDisabled = true;
    private bool _registerBusy;

    [SupplyParameterFromQuery]
    [Parameter]
    public string? returnUrl { get; set; }

    private async Task Reg()
    {
        try
        {
            _registerBusy = true;
            await InvokeAsync(() => StateHasChanged());

            var response = await _client.Register(_username, _password, _firstname, _lastname, _email, _phoneNumber);

            await _client.SaveLogin(response);

            _nav.NavigateTo(returnUrl ?? "/");
        }
        catch (ApiException ex)
        {
            if (ex.ApiResponse?.Message != null)
                _notify.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = ex.ApiResponse.Message, Detail = "Попробуйте еще раз", Duration = 4000 });
        }
        finally
        {
            _registerBusy = true;
            await InvokeAsync(() => StateHasChanged());
        }
    }

    private void UsernameChanged(string username)
    {
        _registerDisabled = string.IsNullOrWhiteSpace(username)
        || username.Length < 4
        || username.Length > 20
        || string.IsNullOrWhiteSpace(_password) 
        || _password.Length < 6
        || _password.Length > 50
        || string.IsNullOrWhiteSpace(_firstname);
    }

    private void PasswordChanged(string password)
    {
        _registerDisabled = 
        string.IsNullOrWhiteSpace(_username) 
        || _username.Length < 3 
        || _username.Length > 20
        || string.IsNullOrWhiteSpace(password) 
        || password.Length < 6
        || password.Length > 50
        || string.IsNullOrWhiteSpace(_firstname)
        ;
    }

    private void FirstnameChanged(string firstname)
    {
        _registerDisabled =
        string.IsNullOrWhiteSpace(_username)
        || _username.Length < 3
        || _username.Length > 20
        || string.IsNullOrWhiteSpace(_password)
        || _password.Length < 6
        || _password.Length > 50
        || string.IsNullOrWhiteSpace(firstname)
        ;
    }
}
