@page "/my-invoices"
@using DeliCheck.Schemas.Responses

@inject DeliCheckClient _client
@inject DialogService _dialog
@inject NotificationService _notify
@inject ContextMenuService _contextMenuService
@inject NavigationManager _nav

<PageTitle>ДелиЧек — Мои чеки</PageTitle>

<RadzenStack Orientation="Orientation.Vertical" JustifyContent="JustifyContent.Center" AlignItems="AlignItems.Center" style="width: 100%; margin-top: 1rem">
    <div class="rz-shadow-2 rz-border-radius-2 rz-mb-1 card" style="max-width: 550px;">
        <RadzenStack Orientation="Orientation.Vertical" JustifyContent="JustifyContent.Center" AlignItems="AlignItems.Stretch" Gap="0">

            <RadzenText class="rz-mb-3" TextAlign="TextAlign.Center" TextStyle="TextStyle.H5" style="font-weight: 600;">Мои чеки</RadzenText>

            <RadzenText class="rz-mt-3" Visible="@_invoicesCountZero" TextAlign="TextAlign.Center">К сожалению, у вас нет ни одного разделенного чека :(<br />Не хотите исправить это?</RadzenText>
            <RadzenDataList Attributes="@(new Dictionary<string, object>() { ["list"] = "positions" })" AllowVirtualization=true Data="@_invoices" TItem="InvoiceResponseModel">
                <Template Context="invoice">
                    <RadzenStack class="rz-my-2" Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.SpaceBetween" AlignItems="AlignItems.Center" Gap="0" @onclick="@(() => ToInvoice(invoice))">
                        <RadzenText class="rz-mb-0" Style="font-weight: 600" Text="@($"Чек от {invoice.CreatedTime + TimeSpan.FromHours(3)}")" />
                        <RadzenText class="rz-mb-0" Style="font-weight: 600" Text="@($"{invoice.TotalCost} ₽")" />
                    </RadzenStack>
                </Template>
            </RadzenDataList>

        </RadzenStack>
    </div>
</RadzenStack>

<AuthRedirect />

<style>
    div[list=positions] > .rz-datalist-data > li {
    cursor: pointer;
    transition: all 100ms ease-in-out;
    }

    div[list=positions] > .rz-datalist-data > li:hover {
    background: var(--rz-primary-lighter);
    }
    /*
    div[list=positions] > .rz-datalist-data > li {
    border-width: 1px 0px 0px 0px;
    border-radius: 0px;
    padding: 0.5rem 0px;
    } */

</style>

@code {
    private bool _isLoading = false;
    private bool _invoicesCountZero = false;

    private IQueryable<InvoiceResponseModel> _invoices;

    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();

        _isLoading = true;
        await InvokeAsync(() => StateHasChanged());

        if (!await _client.IsAuthenticated())
        {
            _notify.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Необходимо авторизоваться", Detail = "Попробуйте еще раз", Duration = 4000 });
            return;
        }

        _invoices = (await _client.ListMyInvoices()).Invoices.AsQueryable();
        _invoicesCountZero = _invoices.Count() == 0;


        _isLoading = false;
        await InvokeAsync(() => StateHasChanged());
    }

    private void ToInvoice(InvoiceResponseModel invoice)
    {
        _nav.NavigateTo($"/invoice?id={invoice.Id}");
    }
}
