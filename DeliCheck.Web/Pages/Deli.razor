@page "/deli"
@using DeliCheck.Schemas
@using DeliCheck.Schemas.Requests
@using DeliCheck.Schemas.Responses
@using System.Globalization

@inject DeliCheckClient _client
@inject DialogService _dialog
@inject NotificationService _notify
@inject ContextMenuService _contextMenuService
@inject NavigationManager _nav
@inject TooltipService tooltipService

<PageTitle>ДелиЧек — Разделить чек</PageTitle>

<RadzenStack Orientation="Orientation.Vertical" JustifyContent="JustifyContent.Center" AlignItems="AlignItems.Center" style="width: 100%; margin-top: 1rem">
    <div class="rz-shadow-2 rz-border-radius-2 card" Style="max-width: 500px; width: 100%">

        <RadzenText class="rz-mb-3" TextAlign="TextAlign.Center" TextStyle="TextStyle.H5" style="font-weight: 600;">Разделить чек</RadzenText>
        <RadzenText class="rz-mb-3" TextAlign="TextAlign.Center">Выберите людей, с которыми хотите разделить чек</RadzenText>


        <RadzenStack Orientation="Orientation.Vertical" Gap="0">

            <RadzenButton class="my-button rz-mb-5" Text="@($"Люди ({(_selected == null ? "0" : _selected.Count - 1)})")" Icon="group" Click="@OpenFriends"></RadzenButton>

            <RadzenStack class="rz-mb-1" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
                <RadzenText class="rz-mb-0" TextAlign="TextAlign.Left" TextStyle="TextStyle.H6" style="font-weight: 600;">Список позиций</RadzenText>
                <RadzenButton Icon="add" Click=@AddItem IsBusy=@_adding class="my-button" ButtonStyle="ButtonStyle.Primary"/>
            </RadzenStack>

            <RadzenStack style="margin-top:1rem;" Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Start" AlignItems="AlignItems.Center" Gap="0">
                <RadzenText style="font-weight: 600; width: 100%; margin-right: 0.5rem" Text="Наименование" />
                <RadzenText style="font-weight: 600; max-width: 4rem; width:100%;margin-right: 0.5rem" Text="Кол-во" />
                <RadzenText style="font-weight: 600; max-width: 4rem; width:100%;margin-right: 44px" Text="Сумма" />
            </RadzenStack>

            <RadzenDataList Attributes="@(new Dictionary<string, object>() { ["list"] = "items" })" Visible="true" AllowVirtualization=@allowVirtualization Style="@(allowVirtualization ? "height:100%;padding:0px;overflow-x:hidden" : "")"
            WrapItems="@(!allowVirtualization)" AllowPaging="@(!allowVirtualization)"
            Data="@_items" TItem="InvoiceItem" PageSize="5" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true" IsLoading="@_isLoading">

                <Template Context="item">

                    <RadzenStack Orientation="Orientation.Vertical" JustifyContent="JustifyContent.Start" AlignItems="AlignItems.Stretch">

                        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Start" AlignItems="AlignItems.Center" Gap="0">
                            <RadzenTextBox style="width: 100%; margin-right: 0.5rem" @bind-Value=@item.Name aria-label="Название" />
                            <RadzenNumeric style="max-width: 4rem; width:100%;margin-right: 0.5rem" TValue="decimal" ShowUpDown="true" f @bind-Value=@item.Count Format="@(item.CountInteger ? $"# {item.QuantityMeasure.ToShortString()}." : $"#0.0 {item.QuantityMeasure.ToShortString()}.")" aria-label="Количество" />
                            <RadzenNumeric style="max-width: 4rem; width:100%;margin-right: 0.5rem" TValue="int" ShowUpDown="false" @bind-Value=@item.Cost @oninput="@((s) => OnInputCost(item, s))" Format="# ₽" aria-label="Цена" />
                            <RadzenButton Variant="Variant.Text" Icon="delete" IconColor="red" IsBusy=@item.Deleting ButtonStyle="ButtonStyle.Danger" Click="@(() => DeleteItem(item))" />
                        </RadzenStack>

                        <RadzenStack Orientation="Orientation.Horizontal" class="rz-mt-2" JustifyContent="JustifyContent.Start" AlignItems="AlignItems.Stretch" Gap="0">
                            <div style="overflow-x: auto; height: 85px; overflow-y: hidden; width:100%">
                                <div style="max-width: 2000px; height: 85px">
                                    <RadzenDataList Attributes="@(new Dictionary<string, object>() { ["list"] = "users" })" Style="width: auto; max-width: 1000px; height: 70px"
                                    TItem="Friend" AllowVirtualization="false" WrapItems="true" AllowPaging="false" Data="@_selected">

                                        <Template Context="user">
                                            <div class="rz-shadow-2" style="@($"transition: all 150ms ease-in-out; cursor: pointer; position: relative; display: flex; justify-content: center; align-items: center; border-radius: 0.5rem; min-width: 65px; width: 65px; max-width: 65px; height: 62px; margin-top: 5px")" item="true" @onclick="@((s) => OnClickUser(item, user))">

                                                <div class="rz-shadow-2" style=@($"{((item.UsersParts[user] == 0) ? "" : "background: var(--rz-primary);")} transition: all 150ms ease-in-out; position: absolute; top: -5px; left:49px; z-index: 2; padding: 0.125rem 0.4rem; border-radius: 6px; width: 30px")>
                                                    <RadzenText class="rz-mb-0" Style="@($"{(item.UsersParts[user] == 0 ? "" : "color: var(--rz-on-primary);")} min-width: 16px; width: 16px; text-align: center; font-size: 0.8rem; font-weight: 600")" Text="@($"x{(item.UsersParts[user])}")" />
                                                </div>

                                                <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                                    <RadzenImage class="rounded-image" Path="@(user.AvatarUrl)" Style="width: 2.4rem; height: 2.4rem;" />
                                                    <RadzenText class="rz-mb-0" Style="font-weight: 600; font-size: 0.65rem; white-space: nowrap; overflow: hidden; text-overflow: ellipsis; width: 69px; text-align: center" Text="@($"{user.Firstname}{(string.IsNullOrWhiteSpace(user.Lastname) ? "" : $" {user.Lastname.Substring(0, 1)}.")}")" />
                                                </RadzenStack>
                                            </div>
                                        </Template>
                                    </RadzenDataList>
                                </div>
                            </div>
                            @* <RadzenIcon class="filled-icon" Icon="info" MouseEnter="@(args => ShowTooltip(args))" IconColor="@Colors.WarningLight" style="margin: auto 8px;" Visible=@(((item.Count == 1 || !item.CountInteger) ? item.UsersParts.Values.Sum() == 0 : item.UsersParts.Values.Sum() != item.Count)) /> *@
                        </RadzenStack>
                    </RadzenStack>
                </Template>

            </RadzenDataList>

        </RadzenStack>



        <div style="width: 100%; border: var(--rz-datalist-item-border); border-width: 1px 0px 0px 0px; height: 1px; background: transparent;"/>

        <RadzenText class="rz-my-3" TextAlign="TextAlign.Right" Style="font-weight: 600" Text="@_textTotal"></RadzenText>

        <RadzenStack Style="rz-mt-3" Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center" AlignItems="AlignItems.Center">
            <RadzenButton class="my-button rz-w-100" Icon="percent" IsBusy=@_discount BusyText="Ура! Скидка..." Text="Скидка" Click="@AddDiscount"></RadzenButton>
            <RadzenButton class=" my-button rz-w-100" Icon="savings" IsBusy=@_tips BusyText="Добавляем чаевые..." Text="Чаевые" Click="@AddTips"></RadzenButton>
        </RadzenStack>

        <RadzenButton class="rz-mt-3 my-button rz-w-100" Disabled=@(!_processAllowed) IsBusy=@_processing BusyText="Разделяем..." Text="Разделить чек" Click="@CreateBills"></RadzenButton>
    </div>

</RadzenStack>

<style>

    :root {
    --rz-input-disabled-color: var(--rz-text-h6-color);
    }

    .rz-numeric input[type=text] {
    padding-inline: 0.5rem 0.25rem;
    }

    div[list=items] > .rz-datalist-data {
    padding: 0px;
    }

    div[list=items] > .rz-datalist-data > li {
    border-width: 1px 0px 0px 0px;
    border-radius: 0px;
    padding: 0.8rem 0px;
    }

    div[list=users] > .rz-g {
    flex-direction: row;
    flex-wrap: nowrap;
    }

    div[list=users] > .rz-g > div {
    margin-block: 0px;
    margin-inline: 0rem 1rem;
    padding: 0.125rem 0.125rem;
    }

</style>

<AuthRedirect />

@code {
    private bool allowVirtualization = true;
    private bool _isLoading = false;
    private bool _adding = false;
    private bool _processing = false;

    private bool _tips = false;
    private bool _discount = false;

    private bool _processAllowed = false;
    private Friend _i;
    private int _myUserId;

    private string _textTotal;

    [Parameter]
    [SupplyParameterFromQuery(Name = "id")]
    public string? Id { get; set; }

    private InvoiceResponseModel _invoice;

    private List<Friend> _selected;

    private IQueryable<InvoiceItem> _items;

    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();

        if (!await _client.IsAuthenticated())
        {
            _notify.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Необходимо авторизоваться", Detail = "Попробуйте еще раз", Duration = 4000 });
            return;
        }

        if (Id == null || !int.TryParse(Id, out int id))
            return;

        _isLoading = true;
        await InvokeAsync(StateHasChanged);

        var myProfile = await _client.GetProfile();
        _myUserId = myProfile.Id;

        _invoice = await _client.GetInvoice(id);

        if (_invoice.BillsCreated)
        {
            _nav.NavigateTo($"/invoice?id={id}");
            return;    
        }

        if(_invoice.SplitType == InvoiceSplitType.ByMembers)
        {
            if (_invoice.EditingFinished)
                _nav.NavigateTo($"/lobby?id={id}");
            else
                _nav.NavigateTo($"/editing?id={id}");
            return;
        }

        if (_invoice.OwnerId != myProfile.Id)
        {
            _notify.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Вы не являеетесь владельцем чека", Detail = "Попробуйте еще раз", Duration = 4000 });
            return;
        }

        _items = _invoice.Items.FromList().AsQueryable();

        _i = new Friend()
            {
                Firstname = "Я",
                HasAvatar = true,
                AvatarUrl = myProfile.AvatarUrl,
                UserId = myProfile.Id,
                HasProfile = true
            };

        _selected = new List<Friend>() { _i };
        foreach (var item in _items)
        {
            if (!item.UsersParts.ContainsKey(_i))
                item.UsersParts.Add(_i, 0);
        }

        RefreshTotal();
        _isLoading = false;
        await InvokeAsync(StateHasChanged);
    }

    private void ShowTooltip(ElementReference elementReference, TooltipOptions options = null) => tooltipService.Open(elementReference, "Разделите позицию!", options);

    protected async Task OpenFriends()
    {
        var selected = await _dialog.OpenAsync<SelectFriends>($"Выберите друзей",
        new Dictionary<string, object>()
        {
            ["SelectedFriends"] = _selected.Where(x => x.UserId != _myUserId).ToList()
        },
        new DialogOptions()
        {
            Resizable = false,
            Draggable = true,
        }) 
        as List<Friend>;

        if (selected == null)
            return;

        _selected ??= new List<Friend>();
        selected ??= new List<Friend>();
        selected.Add(_i);

        if (selected.All(x => _selected.Any(c => x.HasProfile == c.HasProfile && (x.HasProfile ? x.UserId == c.UserId : x.FriendLabelId == c.FriendLabelId))) &&
        _selected.All(x => selected.Any(c => x.HasProfile == c.HasProfile && (x.HasProfile ? x.UserId == c.UserId : x.FriendLabelId == c.FriendLabelId))))
        {
            return;
        }

        List<Friend> unselected = new List<Friend>();

        foreach (var s in _selected)
            if (!selected.Contains(s))
                unselected.Add(s);

        List<Friend> nowSelected = new List<Friend>();

        foreach (var s in selected)
            if (!_selected.Contains(s))
                nowSelected.Add(s);

        try
        {
            foreach (var item in _items)
                foreach (var user in unselected)
                    //if (item.UsersParts.ContainsKey(user))
                        item.UsersParts.Remove(user);

            foreach (var item in _items)
                foreach (var user in nowSelected)
                    if (!item.UsersParts.ContainsKey(user))
                        item.UsersParts.Add(user, 0);
        }
        catch { }

        _selected = selected;
        await InvokeAsync(StateHasChanged);
    }

    private async Task OnInputCost(InvoiceItem item, ChangeEventArgs args)
    {
        if (string.IsNullOrWhiteSpace((string?)args.Value))
        {
            item.EditedCost = 0;
            item.EnableToSaveCost = true;
        }

        var value = ((string)args.Value).Replace(",", ".").Replace("₽", string.Empty).Trim();

        if (int.TryParse(value, out int cost))
        {
            _textTotal = $"Итого: {_items.Sum(x => x.Cost) - item.Cost + cost} ₽";
            await InvokeAsync(() => StateHasChanged());
        }
    }

    private async Task SaveCost(InvoiceItem item)
    {
        item.SavingCost = true;

        try
        {
            await _client.EditInvoiceItem(new InvoiceItem() { Id = item.Id, Cost = item.EditedCost, Count = item.Count, Name = item.Name });
            item.Cost = item.EditedCost;
            item.IsEditingCost = false;
        }
        catch (ApiException ex)
        {
            _notify.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = ex.ApiResponse.Message, Detail = "Попробуйте еще раз", Duration = 4000 });
        }
        finally
        {
            _textTotal = $"Итого: {_items.Sum(x => x.Cost)} ₽";
            item.SavingCost = false;
        }
    }

    private async Task OnClickUser(InvoiceItem item, Friend user)
    {
        if (item.Count == 1 || item.Count % 1 != 0)
        {
            item.UsersParts[user] = item.UsersParts[user] == 0 ? 1 : 0;
        }
        else
        {
            int max = (int)item.Count;

            int all = item.UsersParts.Values.Sum();

            if (item.UsersParts[user] == max)
                item.UsersParts[user] = 0;
            else if (all < max)
                item.UsersParts[user]++;
            else
            {
                var firstGreatest = item.UsersParts.OrderByDescending(x => x.Value).FirstOrDefault(x => x.Key != user).Key;

                if (Object.ReferenceEquals(firstGreatest, null))
                {
                    item.UsersParts[user] = 0;
                }
                else
                {
                    item.UsersParts[firstGreatest] -= 1;
                    item.UsersParts[user]++;
                }
            }
        }

        RefreshTotal();
        await InvokeAsync(StateHasChanged);
    }

    private async Task DeleteItem(InvoiceItem item)
    {
        item.Deleting = true;
        await InvokeAsync(StateHasChanged);

        try
        {
            await _client.RemoveInvoiceItem(item);
            var newItems = _items.ToList();
            newItems.Remove(item);
            _items = newItems.AsQueryable();
        }
        catch (ApiException ex)
        {
            _notify.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = ex.ApiResponse.Message, Detail = "Попробуйте еще раз", Duration = 4000 });
        }
        finally
        {
            item.Deleting = false;
            RefreshTotal();
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task AddItem()
    {
        _adding = true;
        await InvokeAsync(StateHasChanged);

        try
        {
            var item = new InvoiceItem()
                {
                    Name = "Новая позиция",
                    Cost = 1,
                    Count = 1,
                    UsersParts = new Dictionary<Friend, int>()
                };

            foreach (var user in _selected)
            {
                item.UsersParts.Add(user, 0);
            }

            var res = await _client.AddInvoiceItem(_invoice.Id, item);

            item.Id = res.Id;
            var newItems = _items.ToList();
            newItems.Add(item);
            _items = newItems.AsQueryable();
        }
        catch (ApiException ex)
        {
            _notify.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = ex.ApiResponse.Message, Detail = "Попробуйте еще раз", Duration = 4000 });
        }
        finally
        {
            _adding = false;
            RefreshTotal();
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task AddTips()
    {
        _tips = true;
        await InvokeAsync(StateHasChanged);

        try
        {
            var item = new InvoiceItem()
                {
                    Name = "Чаевые",
                    Cost = 250,
                    Count = 1,
                    UsersParts = new Dictionary<Friend, int>()
                };

            foreach (var user in _selected)
            {
                item.UsersParts.Add(user, 1);
            }

            var res = await _client.AddInvoiceItem(_invoice.Id, item);

            item.Id = res.Id;
            var newItems = _items.ToList();
            newItems.Add(item);
            _items = newItems.AsQueryable();
        }
        catch (ApiException ex)
        {
            _notify.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = ex.ApiResponse.Message, Detail = "Попробуйте еще раз", Duration = 4000 });
        }
        finally
        {
            _tips = false;
            RefreshTotal();
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task AddDiscount()
    {
        int cost = _items.Sum(x => x.Cost);

        var val = await _dialog.OpenAsync<DiscountDialog>($"Введите величину скидки",
           new Dictionary<string, object>()
               {
                   ["Cost"] = cost
               },
           new DialogOptions()
               {
                   Resizable = false,
                   Draggable = true,
               });

        if (val == null)
            return;

        _discount = true;
        await InvokeAsync(StateHasChanged);

        try
        {
            foreach(var item in _items)
            {
                item.EditedCost = item.Cost - (int)Math.Round(((int)val / 100m) * item.Cost);
                await SaveCost(item);
            }
        }
        catch (ApiException ex)
        {
            _notify.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = ex.ApiResponse.Message, Detail = "Попробуйте еще раз", Duration = 4000 });
        }
        finally
        {
            _discount = false;
            RefreshTotal();
            await InvokeAsync(StateHasChanged);
        }
    }

    private void RefreshTotal()
    {
        _processAllowed = _items.All(x => ((x.Count == 1 || !x.CountInteger) ? x.UsersParts.Values.Sum() > 0 : x.UsersParts.Values.Sum() == x.Count));
        _textTotal = $"Итого: {_items.Sum(x => x.Cost)} ₽";
    }

    private async Task CreateBills()
    {
        try
        {
            _processing = true;
            await InvokeAsync(StateHasChanged);

            foreach (var item in _items)
            {
                await _client.EditInvoiceItem(new InvoiceItem() { Id = item.Id, Cost = item.Cost, Count = item.Count, Name = item.Name });
            }

            List<UserBill> bills = new List<UserBill>();

            foreach (var user in _selected)
            {
                UserBill bill = new UserBill();

                bill.OfflineOwner = !user.HasProfile;

                bill.OwnerId = user.HasProfile ? (int)user.UserId : (int)user.FriendLabelId;
                bill.Items = new List<Schemas.Requests.UserBillItem>();

                foreach (var item in _items.Where(x => x.UsersParts.ContainsKey(user) && x.UsersParts[user] > 0))
                {
                    decimal userPart;

                    if (item.Count == 1 || !item.CountInteger)
                    {
                        var allParts = item.UsersParts.Values.Sum();
                        userPart = Math.Round((item.Count / allParts) * item.UsersParts[user], 2);
                    }
                    else
                    {
                        userPart = item.UsersParts[user];
                    }

                    bill.Items.Add(new Schemas.Requests.UserBillItem() { ItemId = item.Id, Quantity = userPart });
                }

                bills.Add(bill);
            }

            await _client.FinishInvoiceEditing(_invoice.Id);
            await _client.CreateBills(_invoice.Id, bills);
        }
        catch (ApiException ex)
        {
            _notify.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = ex.ApiResponse.Message, Detail = "Попробуйте еще раз", Duration = 4000 });
        }
        finally
        {
            _processing = false;
            await InvokeAsync(StateHasChanged);
            _nav.NavigateTo($"/invoice?id={_invoice.Id}");
        }
    }
}
